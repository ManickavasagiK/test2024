image: node:14-alpine


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm

stages:
  - build
  # - test
  # - sonarqube
  # - deploy

before_script:
  - apk add --update npm

build:
  stage: build
  script:
    - npm install
    # your other build script
  only:
  - feature
    # - main
    # - staging
    # - develop

# unit-test-job:   # This job runs in the test stage.
#   stage: test
#   image: node:latest  
#   before_script:
#     - npm install
#   script:
#     - npm run test -- --coverage
#     - echo "Unit tests complete."

sonarqube-check:
  stage: sonarqube
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
Step 9: Automating EAS Builds
Build Command: Add a step in your gitlab-ci.yml pipeline to run eas build --platform all --non-interactive (or specify a platform with --platform ios or --platform android). Use the --non-interactive flag to ensure the build process runs without needing manual inputs.
eas-build:
 stage: build
  script:
    - apk add --no-cache bash
    - npm install
    - export EAS_NO_VCS=1
    - npx eas-cli build --platform all --non-interactive --no-wait --profile preview
  only:
    - feature